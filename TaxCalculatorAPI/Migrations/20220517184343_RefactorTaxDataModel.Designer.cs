// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxCalculatorAPI.Data;

#nullable disable

namespace TaxCalculatorAPI.Migrations
{
    [DbContext(typeof(SqliteDataContext))]
    [Migration("20220517184343_RefactorTaxDataModel")]
    partial class RefactorTaxDataModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.ApiUser", b =>
                {
                    b.Property<int>("ApiUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ApiUserId");

                    b.ToTable("ApiUsers");

                    b.HasData(
                        new
                        {
                            ApiUserId = 1,
                            Email = "admin@testsite.com",
                            Password = "$2a$11$dfcMTXKVC.wiCoP.ufmESeIGOeSa3BtMuQWkCMiSQKz//4yXBMrVa"
                        });
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.FlatRateTaxTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RateTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RateValue")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("RateTypeId");

                    b.ToTable("FlatRateTaxTable");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.FlatValueTaxTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MinimumValue")
                        .HasColumnType("REAL");

                    b.Property<int>("RateTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RateValue")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("RateTypeId");

                    b.ToTable("FlatValueTaxTable");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.PostalCodeTaxMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("PostalCodeTaxMap");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PostalCode = "7441",
                            TaxTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            PostalCode = "A100",
                            TaxTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            PostalCode = "7000",
                            TaxTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            PostalCode = "1000",
                            TaxTypeId = 1
                        });
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.ProgressiveTaxTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MaximumValue")
                        .HasColumnType("REAL");

                    b.Property<double>("MinimumValue")
                        .HasColumnType("REAL");

                    b.Property<int>("RateTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RateValue")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("RateTypeId");

                    b.ToTable("ProgressiveTaxTable");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.RateType", b =>
                {
                    b.Property<int>("RateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RateTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RateTypeId");

                    b.ToTable("RateType");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.TaxSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AnnualIncome")
                        .HasColumnType("REAL");

                    b.Property<double>("CalculatedTax")
                        .HasColumnType("REAL");

                    b.Property<int>("PostalCodeTaxMapId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostalCodeTaxMapId");

                    b.ToTable("TaxSubmission");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.TaxType", b =>
                {
                    b.Property<int>("TaxTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaxTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TaxTypeId");

                    b.ToTable("TaxType");

                    b.HasData(
                        new
                        {
                            TaxTypeId = 1,
                            TaxTypeDescription = "Progressive"
                        },
                        new
                        {
                            TaxTypeId = 2,
                            TaxTypeDescription = "Flat Value"
                        },
                        new
                        {
                            TaxTypeId = 3,
                            TaxTypeDescription = "Flat Rate"
                        });
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.FlatRateTaxTable", b =>
                {
                    b.HasOne("TaxCalculatorAPI.Data.Entities.RateType", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.FlatValueTaxTable", b =>
                {
                    b.HasOne("TaxCalculatorAPI.Data.Entities.RateType", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.PostalCodeTaxMap", b =>
                {
                    b.HasOne("TaxCalculatorAPI.Data.Entities.TaxType", "TaxType")
                        .WithMany("PostalCodeTaxMaps")
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.ProgressiveTaxTable", b =>
                {
                    b.HasOne("TaxCalculatorAPI.Data.Entities.RateType", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.TaxSubmission", b =>
                {
                    b.HasOne("TaxCalculatorAPI.Data.Entities.PostalCodeTaxMap", "PostalCodeTaxMap")
                        .WithMany("TaxSubmissions")
                        .HasForeignKey("PostalCodeTaxMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostalCodeTaxMap");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.PostalCodeTaxMap", b =>
                {
                    b.Navigation("TaxSubmissions");
                });

            modelBuilder.Entity("TaxCalculatorAPI.Data.Entities.TaxType", b =>
                {
                    b.Navigation("PostalCodeTaxMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
