// <auto-generated />
using System;
using DataManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataManager.Migrations
{
    [DbContext(typeof(SqliteDataContext))]
    [Migration("20220522105353_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("DataManager.Models.Authorization.ApiUser", b =>
                {
                    b.Property<int>("ApiUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ApiUserId");

                    b.ToTable("ApiUsers");

                    b.HasData(
                        new
                        {
                            ApiUserId = 1,
                            Email = "admin@testsite.com",
                            Password = "$2a$11$MdXGIAUgpOgnwE/7THv62eRo.U.O0dew4wYMUBSVOOuG//.6BIxua"
                        });
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.FlatRateTaxTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RateTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RateValue")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("RateTypeId");

                    b.ToTable("FlatRateTaxTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            RateTypeId = 2,
                            RateValue = 0.17499999999999999
                        });
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.FlatValueTaxTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MaximumValue")
                        .HasColumnType("REAL");

                    b.Property<double>("MinimumValue")
                        .HasColumnType("REAL");

                    b.Property<int>("RateTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RateValue")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("RateTypeId");

                    b.ToTable("FlatValueTaxTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            MaximumValue = 199000.0,
                            MinimumValue = 0.0,
                            RateTypeId = 2,
                            RateValue = 0.050000000000000003
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            MaximumValue = 2147483647.0,
                            MinimumValue = 200000.0,
                            RateTypeId = 1,
                            RateValue = 10000.0
                        });
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.PostalCodeTaxMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("PostalCodeTaxMap");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PostalCode = "7441",
                            TaxTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            PostalCode = "A100",
                            TaxTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            PostalCode = "7000",
                            TaxTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            PostalCode = "1000",
                            TaxTypeId = 1
                        });
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.ProgressiveTaxTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MaximumValue")
                        .HasColumnType("REAL");

                    b.Property<double>("MinimumValue")
                        .HasColumnType("REAL");

                    b.Property<int>("RateTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RateValue")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("RateTypeId");

                    b.ToTable("ProgressiveTaxTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            MaximumValue = 8350.0,
                            MinimumValue = 0.0,
                            RateTypeId = 2,
                            RateValue = 0.10000000000000001
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            MaximumValue = 33950.0,
                            MinimumValue = 8351.0,
                            RateTypeId = 2,
                            RateValue = 0.14999999999999999
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            MaximumValue = 82250.0,
                            MinimumValue = 33951.0,
                            RateTypeId = 2,
                            RateValue = 0.25
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            MaximumValue = 171550.0,
                            MinimumValue = 82251.0,
                            RateTypeId = 2,
                            RateValue = 0.28000000000000003
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            MaximumValue = 372950.0,
                            MinimumValue = 171551.0,
                            RateTypeId = 2,
                            RateValue = 0.33000000000000002
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            MaximumValue = 2147483647.0,
                            MinimumValue = 372951.0,
                            RateTypeId = 2,
                            RateValue = 0.34999999999999998
                        });
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.RateType", b =>
                {
                    b.Property<int>("RateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RateTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RateTypeId");

                    b.ToTable("RateTypes");

                    b.HasData(
                        new
                        {
                            RateTypeId = 1,
                            RateTypeDescription = "Amount"
                        },
                        new
                        {
                            RateTypeId = 2,
                            RateTypeDescription = "Percentage"
                        });
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.TaxSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AnnualIncome")
                        .HasColumnType("REAL");

                    b.Property<double>("CalculatedTax")
                        .HasColumnType("REAL");

                    b.Property<int>("PostalCodeTaxMapId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostalCodeTaxMapId");

                    b.ToTable("TaxSubmission");
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.TaxType", b =>
                {
                    b.Property<int>("TaxTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaxTypeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TaxTypeId");

                    b.ToTable("TaxType");

                    b.HasData(
                        new
                        {
                            TaxTypeId = 1,
                            TaxTypeDescription = "Progressive"
                        },
                        new
                        {
                            TaxTypeId = 2,
                            TaxTypeDescription = "Flat Value"
                        },
                        new
                        {
                            TaxTypeId = 3,
                            TaxTypeDescription = "Flat Rate"
                        });
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.FlatRateTaxTable", b =>
                {
                    b.HasOne("DataManager.Models.TaxCalculator.RateType", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.FlatValueTaxTable", b =>
                {
                    b.HasOne("DataManager.Models.TaxCalculator.RateType", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.PostalCodeTaxMap", b =>
                {
                    b.HasOne("DataManager.Models.TaxCalculator.TaxType", "TaxType")
                        .WithMany("PostalCodeTaxMaps")
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.ProgressiveTaxTable", b =>
                {
                    b.HasOne("DataManager.Models.TaxCalculator.RateType", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.TaxSubmission", b =>
                {
                    b.HasOne("DataManager.Models.TaxCalculator.PostalCodeTaxMap", "PostalCodeTaxMap")
                        .WithMany("TaxSubmissions")
                        .HasForeignKey("PostalCodeTaxMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostalCodeTaxMap");
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.PostalCodeTaxMap", b =>
                {
                    b.Navigation("TaxSubmissions");
                });

            modelBuilder.Entity("DataManager.Models.TaxCalculator.TaxType", b =>
                {
                    b.Navigation("PostalCodeTaxMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
